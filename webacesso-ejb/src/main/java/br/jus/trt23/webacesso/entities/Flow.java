//
// This file was generated by the JPA Modeler
//
package br.jus.trt23.webacesso.entities;

import br.jus.trt23.nucleo.entities.EntidadeGenerica;
import br.jus.trt23.webacesso.constants.Constantes;
import java.util.Collection;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
@Table(schema = Constantes.SCHEMA)
public class Flow extends EntidadeGenerica<Long> {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "id")
    @SequenceGenerator(
            schema = Constantes.SCHEMA, sequenceName = "flow_seq", name = "id"
    )
    protected Long id;

    @ManyToOne(targetEntity = Sistema.class)
    private Sistema sistema;

    @Column(nullable = false)
    @Basic
    private Short exibicaoOrdem;

    @ManyToMany(targetEntity = Papel.class)
    @JoinTable(schema = Constantes.SCHEMA,name = "FLOW_PAPEL")
    private Set<Papel> papeis;

    @ManyToMany(targetEntity = Usuario.class)
    private Set<Usuario> usuarios;

    @Column(unique = true, nullable = false)
    @Basic
    private String flowId;

    @OneToMany(targetEntity = FlowView.class, mappedBy = "flow")
    private Set<FlowView> views;

    public Flow() {
        usuarios = new HashSet();
        papeis = new HashSet();
        views = new HashSet();
    }
    
    public void addPapeis(Papel papel){
        papeis.add(papel);
        papel.getFlows().add(this);
    }

    public void addPapeis(Collection<Papel> papeis){
        for(Papel p : papeis){
            addPapeis(p);
        }
    }

    public void removePapeis(Papel papel){
        papeis.remove(papel);
        papel.getFlows().remove(this);
    }

    public void removePapeis(Collection<Papel> papeis){
        for(Papel p : papeis){
            removePapeis(p);
        }
    }
    
    @Override
    public String getNomeNatural() {
        return "Flow";
    }

    @Override
    public String toString() {
        return getFlowId();
    }
    
    
}
